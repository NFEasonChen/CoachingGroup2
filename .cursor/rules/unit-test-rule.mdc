---
description: This rule defines the naming conventions, structure, and best practices for writing unit tests in C#. It covers test file and class naming, method naming (using snake_case), file organization, and the required structure for test classes and methods. It also specifies the use of NSubstitute for mocking, FluentAssertions for assertions, and provides patterns for helper methods and exception testing. The goal is to ensure consistency, readability, and reliability in all unit tests across the codebase.
globs: 
alwaysApply: false
---
# C# Unit Testing Rules 

## Test File Naming Conventions
- Test class name: {ClassName}Tests
- Test method name: Use snake_case format: {action}_{condition}_{expected_result}
   Example: cancel_home_goal_succeed_when_1_to_1_at_second_half
- Test file location: tests/{ProjectName}.Tests/{corresponding folder structure}

## Test Class Structure
Each test class must include:
1. [TestFixture] attribute
2. Private fields for mock objects (use underscore prefix: _mockRepo)
3. Private fields for constant values (e.g., _defaultMatchId)
4. Setup method ([SetUp]) to initialize mocks and the class under test
5. Instance of the class under test
6. Helper methods for setting up test data (Given...)
7. Helper methods for verifying results (Should...)

## Test Method Structure
Each test method should follow this pattern:
1. Use Given... methods to set up preconditions
2. Execute the method under test
3. Use FluentAssertions for assertions
4. Use Should... methods to verify interactions

## Helper Method Naming Conventions
- Given methods: Used to set up test preconditions
   Example: GivenMatchScores(string matchScores)
- Should methods: Used to verify test results
   Example: ShouldUpdateNewScoresToRepo(string newMatchScores)

## Mock Object Conventions
- Mock fields use underscore prefix: _mockRepository, _matchRepo
- Use NSubstitute to create mocks: Substitute.For<IInterface>()
- Mock method return values: _mockRepo.Method().Returns(value)
- Verify method calls: _mockRepo.Received(1).Method()
- Verify complex parameters: Arg.Is<Type>(condition)

## Assertion Conventions
- Use FluentAssertions for all assertions
- Simple value comparison: result.Should().Be(expected)
- Exception verification: action.Should().Throw<ExceptionType>()
- Exception property verification: .Where(exception => exception.Property == expectedValue)
- Boolean verification: result.Should().BeTrue() / result.Should().BeFalse()

## Exception Testing Pattern
For tests that are expected to throw exceptions:
```csharp
Action action = () => controllerMethod(parameters);
action.Should().Throw<ExceptionType>()
    .Where(exception => exception.Property1 == value1 
                     && exception.Property2 == value2);       

## Core Development Philosophy

### TDD Red-Green-Refactor Cycle
1. **RED**: Always write a failing NUnit test first
2. **GREEN**: Write minimal C# code to pass the test
3. **REFACTOR**: Improve code while keeping tests green

### Simple Design Principles (Priority Order)
1. **Passes all tests** - All NUnit tests must pass
2. **Expresses intent** - Code clearly communicates its purpose
3. **No duplication** - Eliminate code and concept duplication
4. **Minimal elements** - Fewest classes, methods, properties needed              